;this file is to be pasted into the racket program and saved as a .rkt file.
;you will also need to download the sicp package. File->Package Manager->enter 'sicp' and hit enter.
;make sure the language is set to 'The Racket Language'
;if you want to add more primitives to this evaluator check line 354.
;to get an understanding of how this evaluator works read SICP 4.1 or watch https://youtu.be/aAlR3cezPJg (one of my favourite sicp lectures)

#lang sicp

;eval and apply are the main functions. eval is like a parser + environment (it looks up the value in the environment) and apply is the function that ;actually computes the value.

;--------------------------------------------------------
;eval and apply

(define (eval exp env)
  (cond ((self-evaluating? exp) exp)          ;remove this later
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((and? exp) (eval-and (and-sequences exp) env))
        ((or? exp) (eval-or (or-sequences exp) env))
        ((lambda? exp) (make-procedure (lambda-parameters exp)
                                       (lambda-body exp)
                                       env))
        ((begin? exp) (eval-sequence (begin-actions exp) env))
        ((cond? exp) (eval (cond->if exp) env))
        ((env-check? exp) env)
        ((application? exp) (apply (eval (operator exp) env)
                                   (list-of-values (operands exp) env)))
        (else (error "Unknown expression of type: EVAL" exp))))


(define (apply procedure arguments)
  (cond ((primitive-procedure? procedure)
         (apply-primitive-procedure procedure arguments))
        ((compound-procedure? procedure)
         (eval-sequence (procedure-body procedure)
                        (extend-environment (procedure-parameters procedure)
                                            arguments
                                            (procedure-environment procedure))))))


;--------------------------------------------------------
;procdedures used by eval and apply directly


(define (list-of-values exps env)           ;cons up a list of all the evalved inpur arguments. used by apply when applying arguments to a procedure.
  (if (no-operands? exps)
      '()
      (cons (eval (first-operand exps) env)
            (list-of-values (rest-operands exps) env))))



(define (operator exp) (car exp))          ;set-of operations to deal with operator and operands.
(define (operands exp) (cdr exp))
(define (first-operand exp) (car exp))
(define (rest-operands exp) (cdr exp)) 
(define (no-operands? exps)
  (null? exps))



(define (application? exp) (pair? exp))



(define (apply-primitive-procedure proc args) 
  (if (null? (cdr args))
      (car args)
      ((primitive-implementation proc) (car args) (apply-primitive-procedure proc (cdr args)))))



(define (primitive-procedure? proc) (tagged-list? proc 'primitive))
(define (primitive-implementation proc) (cadr proc))

(define (compound-procedure? p) (tagged-list? p 'procedure))
(define (procedure-parameters p) (cadr p)) (define (procedure-body p) (caddr p))
(define (procedure-environment p) (cadddr p))
(define (make-procedure parameters body env) (list 'procedure parameters body env))

(define (env-check? exp)
  (eq? (car exp) 'env-check))  ;if you type '(env-check)' into ;;; M-Eval input: it will output the enviromnent in which '(env-check)' was run.


;--------------------------------------------------------
;mini-evals for different forms of expressions

(define (eval-sequence exps env)
  (cond ((last-expression? exps)
         (eval (first-expression exps) env))
        (else (eval (first-expression exps) env)
              (eval-sequence (rest-expressions exps) env))))


(define (eval-definition exp env)
  (define-variable! (definition-variable exp)
                    (eval (definition-value exp) env)
                    env)
  'ok)


(define (eval-if exp env)
  (if (true? (eval (if-predicate exp) env))
      (eval (if-consequent exp) env)
      (eval (if-alternative exp) env)))


(define (eval-and sequences env)            ;and is a cons object but sequences are a list object.
  (if (and-sequences-empty? sequences) 'true
      (if (false? (eval (first-and-sequence sequences) env))
          'false
          (eval-and (rest-and-sequences sequences) env))))


(define (eval-or sequences env)
  (if (or-sequence-empty? sequences)
      'false
      (if (true? (eval (first-or-sequence sequences) env))
          'true
          (eval-or (rest-or-sequences sequences) env))))
                  
  
(define (eval-assignment exp env)
  (set-variable-value! (assignment-variable exp)
                       (eval (assignment-value exp) env)
                       env)
  'ok)
         

(define (last-expression? exp)            ;procedures used by eval-sequence
  (null? (cdr exp)))
(define (first-expression exp)
  (car exp))
(define (rest-expressions exps)
  (cdr exps))

;--------------------------------------------------------
; Now we will make up the specification of the language the evaluator will evaluate.You can change these procedues to change the language.


(define (self-evaluating? exp)
  (cond ((number? exp) true)
        ((string? exp) true)
        (else false)))



(define (variable? exp)
  (symbol? exp))



(define (tagged-list? exp quote)
  (if (pair? exp)
      (eq? (car exp) quote)
      false))



(define (quoted? exp)
  (tagged-list? exp 'quote))



(define (text-of-quotation exp)
  (car (cdr exp)))



(define (assignment? exp)
  (tagged-list? exp 'set!))
(define (assignment-variable exp)
  (car (cdr exp)))
(define (assignment-value exp)
  (car (cdr (cdr exp))))



(define (definition? exp) (tagged-list? exp 'define))
(define (definition-variable exp)
  (if (symbol? (car (cdr exp)))
      (car (cdr exp))
      (car (car (cdr exp)))))
(define (definition-value exp)
  (if (symbol? (car (cdr exp)))
      (car (cdr (cdr exp)))
      (make-lambda (cdr (car (cdr exp)))
                   (cdr (cdr exp)))))



(define (lambda? exp)
  (tagged-list? exp 'lambda))
(define (lambda-parameters exp)
  (car (cdr exp)))
(define (lambda-body exp)
  (cdr (cdr exp)))
(define (make-lambda arguments body)
  (cons 'lambda (cons arguments body)))  ;make-lambda makes a cons object while make-if makes a list object



(define (if? exp) (tagged-list? exp 'if))
(define (if-predicate exp) (car (cdr exp)))
(define (if-consequent exp) (car (cdr (cdr exp))))
(define (if-alternative exp)
  (if (not (null? (cdr (cdr (cdr exp)))))
      (car (cdr (cdr (cdr exp))))
      'false))
(define (make-if predicate consequent alternative)
  (list 'if predicate consequent alternative))



(define (and? exp) (tagged-list? exp 'and))
(define (and-sequences exp) (cdr exp))
(define (make-and sequences) (cons 'and sequences))
(define (and-sequences-empty? sequences)
  (if (null? sequences)
      true
      false))
(define (first-and-sequence sequences)
  (car sequences))
(define (rest-and-sequences sequences)
  (cdr sequences))



(define (or? exp) (tagged-list? exp 'or))
(define (or-sequences exp) (cdr exp))
(define (make-or sequences) (cons 'or sequences))
(define (or-sequence-empty? sequences)
  (if (null? sequences)
      true
      false))
(define (first-or-sequence sequences)
  (car sequences))
(define (rest-or-sequences sequences)
  (cdr sequences))



(define (begin? exp) (tagged-list? exp 'begin))
(define (begin-actions exp) (cdr exp))
(define (last-exp? seq) (null? (cdr seq)))
(define (first-exp seq) (car seq))
(define (rest-exp seq) (cdr seq))



(define (sequence->exp seq)
  (cond ((null? seq) seq)
        ((last-exp? seq) (first-exp seq))
        (else (make-begin seq))))
(define (make-begin seq) (cons 'begin seq))



(define (cond? exp) (tagged-list? exp 'cond))
(define (cond-clauses exp) (cdr exp))
(define (cond-else-clause? clause) (eq? (cond-predicate clause) 'else))
(define (cond-predicate clause) (car clause))
(define (cond-actions clause) (cdr clause))
(define (cond->if exp) (expand-clauses (cond-clauses exp)))
(define (expand-clauses clauses)
  (if (null? clauses)
      'false
      (let ((first (car clauses))
            (rest (cdr clauses)))
        (if (cond-else-clause? first)
            (if (null? rest)
                (sequence->exp first)
                (error "ELSE clause isn't last: COND->IF" clauses))
            (make-if (cond-predicate first)
                     (sequence->exp (cond-actions first))
                     (expand-clauses clauses))))))



(define (true? x) (not (eq? false x)))
(define (false? x) (eq? false x))

;--------------------------------------------------------
;procedures to deal with environment model.


(define (enclosing-environment env) (cdr env))
(define (first-frame env) (car env))
(define the-empty-environment '())



(define (make-frame variables values) (cons variables values))
(define (frame-variables frame) (car frame))
(define (frame-values frame) (cdr frame))
(define (add-binding-to-frame! var val frame)
    (set-car! frame (cons var (car frame))) (set-cdr! frame (cons val (cdr frame))))



(define (extend-environment var val base-env)
  (if (= (length var) (length var))
      (cons (make-frame var val) base-env)
      (if (< (length var) (length val))
          (error "TOO MANY ARGUMENTS SUPLIED" var val)
          (error "TOO FEW ARGUMENTS SUPPLIED" var val))))



(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
             (env-loop (enclosing-environment env)))
            ((eq? (car vars) var) (car vals))
            (else (scan (cdr vars) (cdr vals)))))
     (if (eq? the-empty-environment env)
         (error "UNBOUND VARIABLE" var)
         (let ((frame (first-frame env)))
           (scan (frame-variables frame)
                 (frame-values frame)))))
  (env-loop env))



(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (define (scan vars vals)
      (cond ((null? vars) (add-binding-to-frame! var val frame))
            ((eq? (car vars) var) (set-car! vals val))
            (else (scan (cdr vars) (cdr vals)))))
    (scan (frame-variables frame) (frame-values frame))))


            
(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
              (env-loop (enclosing-environment env)))
            ((eq? var (car vars)) (set-car! vals val))
            (else (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable: SET!" var) (let ((frame (first-frame env)))
        (scan (frame-variables frame) (frame-values frame)))))
(env-loop env))

;--------------------------------------------------------
; Running the evaluator as a program


(define primitive-procedures (list (list 'car car)
                                   (list 'cdr cdr)
                                   (list 'cons cons)
                                   (list 'null? null?)
                                   (list '+ +)
                                   (list '* *)
                                   (list '- -)
                                   (list '/ /)
                                   (list '= =)
                                   (list 'eq? eq?))) ;addmore primitives here
(define (primitive-procedure-names) (map car primitive-procedures))
(define (primitive-procedure-objects)
  (map (lambda (proc) (list 'primitive (cadr proc)))
       primitive-procedures))

(define (setup-environment)                                                ;setup the environment
  (let ((initial-env (extend-environment (primitive-procedure-names)
                                         (primitive-procedure-objects)
                                         the-empty-environment)))
    (define-variable! 'true true initial-env)
    (define-variable! 'false false initial-env)
    initial-env))

;--------------------------------------------------------
;finally our evaluator driver

(define input-prompt ";;; M-Eval input:")
(define output-prompt ";;; M-Eval value:")
(define (prompt-for-input string)
  (newline) (newline) (display string) (newline))
(define (announce-output string)
  (newline) (display string) (newline))
(define (user-print object)
  (if (compound-procedure? object)
      (display (list 'compound-procedure (procedure-parameters object)
                     (procedure-body object)
                     '<procedure-env>)) (display object)))

(define (driver-loop)               ;this is our main loop function which will run everything.
  (prompt-for-input input-prompt)
  (let ((input (read)))
    (let ((output (eval input the-global-environment)))
      (announce-output output-prompt)
      (user-print output)))
  (driver-loop))


;-----------------------------------------------------

;runnning the driver
(define the-global-environment (setup-environment))
(driver-loop)

    